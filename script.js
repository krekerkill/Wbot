// === URL –∫ products.json –Ω–∞ GitHub ===
const PRODUCTS_JSON_URL = 'https://raw.githubusercontent.com/krekerkill/Wbot/refs/heads/main/products.json ';

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö ===
const productsData = {};

// ===== –û–°–ù–û–í–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´ =====
const selectAll = document.getElementById('selectAllBrands');
const brandCheckboxes = document.querySelectorAll('.brand-checkboxes input[type="checkbox"]');
const priceSlider = document.getElementById('priceSlider');
const priceValue = document.getElementById('priceValue');
const filterButton = document.getElementById('filterButton');
const filterModal = document.getElementById('filterModal');
const quickViewModal = document.getElementById('quickViewModal');

// ===== THEME TOGGLE =====
const themeToggle = document.getElementById('themeToggle');
function loadTheme() {
    const isDark = localStorage.getItem('darkMode') === 'true';
    if (isDark) {
        document.body.classList.add('dark-mode');
        if (themeToggle) themeToggle.textContent = '‚òÄÔ∏è';
    } else {
        document.body.classList.remove('dark-mode');
        if (themeToggle) themeToggle.textContent = 'üåô';
    }
}
if (themeToggle) {
    themeToggle.addEventListener('click', () => {
        document.body.classList.toggle('dark-mode');
        const isDark = document.body.classList.contains('dark-mode');
        localStorage.setItem('darkMode', isDark);
        themeToggle.textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
    });
}

// ===== MODAL LOGIC =====
function centerModal(modalElement) {
    const modalContent = modalElement?.querySelector('.modal-content, .quick-view-content');
    if (modalContent) {
        modalContent.style.position = 'fixed';
        modalContent.style.top = '50%';
        modalContent.style.left = '50%';
        modalContent.style.transform = 'translate(-50%, -50%)';
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
if (filterButton && filterModal) {
    filterButton.addEventListener('click', () => {
        filterModal.style.display = 'block';
        document.body.classList.add('no-scroll');
        centerModal(filterModal);
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–∫–æ–º –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
    filterModal.addEventListener('click', (e) => {
        const modalContent = filterModal.querySelector('.modal-content');
        if (!modalContent || !modalContent.contains(e.target)) {
            filterModal.style.display = 'none';
            document.body.classList.remove('no-scroll');
        }
    });
}

// –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
function showQuickView(productId) {
    const product = productsData[productId];
    if (!product) return;

    document.getElementById('quickViewImage').src = product.image.trim();
    document.getElementById('quickViewTitle').textContent = product.title;
    document.getElementById('quickViewDescription').textContent = product.description;
    document.getElementById('quickViewPrice').textContent = product.price + ' ‚ÇΩ';
    document.getElementById('quickViewModal').style.display = 'block';
    document.body.classList.add('no-scroll');
    centerModal(document.getElementById('quickViewModal'));
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.querySelector('.close-quick-view')?.addEventListener('click', () => {
    quickViewModal.style.display = 'none';
    document.body.classList.remove('no-scroll');
});
quickViewModal?.addEventListener('click', (e) => {
    const modalContent = quickViewModal.querySelector('.quick-view-content');
    if (!modalContent || !modalContent.contains(e.target)) {
        quickViewModal.style.display = 'none';
        document.body.classList.remove('no-scroll');
    }
});

// ===== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø =====
if (priceSlider && priceValue) {
    priceSlider.addEventListener('input', () => {
        priceValue.textContent = `${priceSlider.value} ‚ÇΩ`;
    });
}

function applyFilters() {
    const maxPrice = parseInt(priceSlider?.value || 150000);
    const selectedBrands = Array.from(document.querySelectorAll('.brand-checkboxes input[type="checkbox"]:checked')).map(cb => cb.value);

    document.querySelectorAll('.brand-group').forEach(group => {
        const brand = group.getAttribute('data-brand');
        const isVisible = selectedBrands.includes(brand);
        group.style.display = isVisible ? 'block' : 'none';

        if (isVisible) {
            let hasVisibleProducts = false;
            group.querySelectorAll('.product-card').forEach(card => {
                const price = parseInt(card.getAttribute('data-price') || 0);
                card.style.display = price <= maxPrice ? 'block' : 'none';
                if (price <= maxPrice) hasVisibleProducts = true;
            });

            const title = group.querySelector('.brand-title');
            if (title) title.style.display = hasVisibleProducts ? 'block' : 'none';
        }
    });

    saveFilters();
    if (filterModal) filterModal.style.display = 'none';
    document.body.classList.remove('no-scroll');
}

function saveFilters() {
    const filters = {
        brands: Array.from(brandCheckboxes).map(cb => cb.checked),
        maxPrice: priceSlider?.value || 150000
    };
    localStorage.setItem('filters', JSON.stringify(filters));
}

function loadFilters() {
    const savedFilters = JSON.parse(localStorage.getItem('filters'));
    if (savedFilters) {
        brandCheckboxes.forEach((cb, i) => {
            if (savedFilters.brands[i] !== undefined) cb.checked = savedFilters.brands[i];
        });
        selectAll.checked = brandCheckboxes.every(cb => cb.checked);
        if (priceSlider) priceSlider.value = savedFilters.maxPrice || 150000;
        if (priceValue) priceValue.textContent = `${priceSlider?.value || 150000} ‚ÇΩ`;
    }
}

// ===== –°–ë–†–û–° –§–ò–õ–¨–¢–†–û–í =====
resetBtn?.addEventListener('click', () => {
    brandCheckboxes.forEach(cb => cb.checked = true);
    selectAll.checked = true;
    priceSlider.value = '150000';
    priceValue.textContent = '150000 ‚ÇΩ';
    applyFilters();
});

// ===== TELEGRAM INITIALIZATION =====
window.addEventListener('DOMContentLoaded', () => {
    loadProductsFromGitHub(); // –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å GitHub
    loadFilters();           // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    loadTheme();             // —Ç–µ–º–∞ –∏–∑ localStorage

    if (window.Telegram?.WebApp) {
        Telegram.WebApp.expand();
        Telegram.WebApp.enableClosingConfirmation();
    }
});

// ===== –ó–ê–ì–†–£–ó–ö–ê –¢–û–í–ê–†–û–í –° GITHUB =====
async function loadProductsFromGitHub() {
    try {
        const response = await fetch(PRODUCTS_JSON_URL);
        if (!response.ok) throw new Error('–ù–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON');

        const data = await response.json();

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        for (const id in productsData) delete productsData[id];

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        for (const id in data) {
            productsData[id] = data[id];
        }

        renderCatalog(); // —Ä–∏—Å—É–µ–º –∫–∞—Ç–∞–ª–æ–≥
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e.message);
        document.getElementById('products-container').innerHTML = `
            <div class="error-message">
                ‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ —Ñ–∞–π–ª products.json
            </div>
        `;
    }
}

// ===== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ö–ê–¢–ê–õ–û–ì–ê =====
function renderCatalog() {
    const container = document.getElementById('products-container');
    container.innerHTML = ''; // –æ—á–∏—â–∞–µ–º

    const brandsMap = {};
    for (const id in productsData) {
        const p = productsData[id];
        const brand = p.brand || 'other'; // –µ—Å–ª–∏ –Ω–µ—Ç –±—Ä–µ–Ω–¥–∞ ‚Äî other

        if (!brandsMap[brand]) brandsMap[brand] = [];
        brandsMap[brand].push({ id, ...p });
    }

    for (const brand in brandsMap) {
        const group = document.createElement('div');
        group.className = 'brand-group';
        group.setAttribute('data-brand', brand);

        const title = document.createElement('h2');
        title.className = 'brand-title';
        title.textContent = capitalize(brand);
        group.appendChild(title);

        const grid = document.createElement('div');
        grid.className = 'products-grid';

        brandsMap[brand].forEach(product => {
            const card = document.createElement('div');
            card.className = 'product-card';
            card.setAttribute('data-id', product.id);
            card.setAttribute('data-price', product.price.replace(/\s/g, ''));
            card.setAttribute('onclick', `showQuickView('${product.id}')`);

            card.innerHTML = `
                <div class="product-image-container">
                    <img src="${product.image.trim()}" alt="${product.title}" loading="lazy">
                </div>
                <div class="product-details">
                    <h3>${product.title}</h3>
                    <p>${product.description}</p>
                    <div class="price">${product.price}</div>
                </div>
            `;

            grid.appendChild(card);
        });

        group.appendChild(grid);
        container.appendChild(group);
    }

    applyFilters(); // –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
}

function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
